/*
 * generated by Xtext
 */
grammar InternalZhu;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.alma.mde.statemachine.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.alma.mde.statemachine.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.alma.mde.statemachine.services.ZhuGrammarAccess;

}

@parser::members {

 	private ZhuGrammarAccess grammarAccess;
 	
    public InternalZhuParser(TokenStream input, ZhuGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StateMachine";	
   	}
   	
   	@Override
   	protected ZhuGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMachineRule()); }
	 iv_ruleStateMachine=ruleStateMachine 
	 { $current=$iv_ruleStateMachine.current; } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='diagram' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateMachineAccess().getDiagramKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateMachineAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateMachineAccess().getRegionTopRegionParserRuleCall_2_0()); 
	    }
		lv_region_2_0=ruleTopRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateMachineRule());
	        }
       		set(
       			$current, 
       			"region",
        		lv_region_2_0, 
        		"TopRegion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateMachineAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTopRegion
entryRuleTopRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopRegionRule()); }
	 iv_ruleTopRegion=ruleTopRegion 
	 { $current=$iv_ruleTopRegion.current; } 
	 EOF 
;

// Rule TopRegion
ruleTopRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='region' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTopRegionAccess().getRegionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTopRegionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTopRegionAccess().getStatesStatesParserRuleCall_2_0()); 
	    }
		lv_states_2_0=ruleStates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopRegionRule());
	        }
       		set(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"States");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTopRegionAccess().getRegionsRegionParserRuleCall_3_0()); 
	    }
		lv_regions_3_0=ruleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopRegionRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_3_0, 
        		"Region");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTopRegionAccess().getTransitionsTransitionsParserRuleCall_4_0()); 
	    }
		lv_transitions_4_0=ruleTransitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopRegionRule());
	        }
       		set(
       			$current, 
       			"transitions",
        		lv_transitions_4_0, 
        		"Transitions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTopRegionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleRegion
entryRuleRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegionRule()); }
	 iv_ruleRegion=ruleRegion 
	 { $current=$iv_ruleRegion.current; } 
	 EOF 
;

// Rule Region
ruleRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='region' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRegionAccess().getRegionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRegionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRegionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getStatesStatesParserRuleCall_3_0()); 
	    }
		lv_states_3_0=ruleStates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		set(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"States");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getRegionsRegionParserRuleCall_4_0()); 
	    }
		lv_regions_4_0=ruleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_4_0, 
        		"Region");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRegionAccess().getTransitionsTransitionsParserRuleCall_5_0()); 
	    }
		lv_transitions_5_0=ruleTransitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegionRule());
	        }
       		set(
       			$current, 
       			"transitions",
        		lv_transitions_5_0, 
        		"Transitions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRegionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTransitions
entryRuleTransitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionsRule()); }
	 iv_ruleTransitions=ruleTransitions 
	 { $current=$iv_ruleTransitions.current; } 
	 EOF 
;

// Rule Transitions
ruleTransitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transitions' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionsAccess().getTransitionsKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionsAccess().getColonKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionsAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionsAccess().getFirstTransitionTransitionParserRuleCall_3_0()); 
	    }
		lv_firstTransition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionsRule());
	        }
       		set(
       			$current, 
       			"firstTransition",
        		lv_firstTransition_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionsAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionsAccess().getFollowingTransitionsTransitionParserRuleCall_4_1_0()); 
	    }
		lv_followingTransitions_5_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionsRule());
	        }
       		add(
       			$current, 
       			"followingTransitions",
        		lv_followingTransitions_5_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransitionsAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_0());
    }
	otherlv_1='states' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getStatesKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getSourceStateCrossReference_3_0()); 
	}

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getTargetStateCrossReference_5_0()); 
	}

)
)	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getCommaKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTriggersTriggersParserRuleCall_7_0()); 
	    }
		lv_triggers_7_0=ruleTriggers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"triggers",
        		lv_triggers_7_0, 
        		"Triggers");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_8='guard' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getGuardKeyword_8_0());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getColonKeyword_8_1());
    }
(
(
		lv_guard_10_0=RULE_STRING
		{
			newLeafNode(lv_guard_10_0, grammarAccess.getTransitionAccess().getGuardSTRINGTerminalRuleCall_8_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"guard",
        		lv_guard_10_0, 
        		"STRING");
	    }

)
)	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getCommaKeyword_8_3());
    }
)?(	otherlv_12='behaviour' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransitionAccess().getBehaviourKeyword_9_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTransitionAccess().getColonKeyword_9_1());
    }
(
(
		lv_behaviour_14_0=RULE_STRING
		{
			newLeafNode(lv_behaviour_14_0, grammarAccess.getTransitionAccess().getBehaviourSTRINGTerminalRuleCall_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"behaviour",
        		lv_behaviour_14_0, 
        		"STRING");
	    }

)
))?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleStates
entryRuleStates returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatesRule()); }
	 iv_ruleStates=ruleStates 
	 { $current=$iv_ruleStates.current; } 
	 EOF 
;

// Rule States
ruleStates returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='states' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatesAccess().getStatesKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatesAccess().getColonKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatesAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesAccess().getStatesStatesSeparatedParserRuleCall_3_0()); 
	    }
		lv_states_3_0=ruleStatesSeparated		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesRule());
	        }
       		set(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"StatesSeparated");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatesAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStatesSeparated
entryRuleStatesSeparated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatesSeparatedRule()); }
	 iv_ruleStatesSeparated=ruleStatesSeparated 
	 { $current=$iv_ruleStatesSeparated.current; } 
	 EOF 
;

// Rule StatesSeparated
ruleStatesSeparated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatesSeparatedAccess().getFirstStateStateParserRuleCall_0_0()); 
	    }
		lv_firstState_0_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesSeparatedRule());
	        }
       		set(
       			$current, 
       			"firstState",
        		lv_firstState_0_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatesSeparatedAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesSeparatedAccess().getFollowingStatesStateParserRuleCall_1_1_0()); 
	    }
		lv_followingStates_2_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesSeparatedRule());
	        }
       		add(
       			$current, 
       			"followingStates",
        		lv_followingStates_2_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStateAccess().getDirectionParserRuleCall_0()); 
    }
ruleDirection
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDirection
entryRuleDirection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectionRule()); } 
	 iv_ruleDirection=ruleDirection 
	 { $current=$iv_ruleDirection.current.getText(); }  
	 EOF 
;

// Rule Direction
ruleDirection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDirectionAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDirectionAccess().getAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleTriggers
entryRuleTriggers returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggersRule()); }
	 iv_ruleTriggers=ruleTriggers 
	 { $current=$iv_ruleTriggers.current; } 
	 EOF 
;

// Rule Triggers
ruleTriggers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='triggers' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggersAccess().getTriggersKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggersAccess().getColonKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriggersAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggersAccess().getTriggersTriggersSeparatedParserRuleCall_3_0()); 
	    }
		lv_triggers_3_0=ruleTriggersSeparated		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggersRule());
	        }
       		set(
       			$current, 
       			"triggers",
        		lv_triggers_3_0, 
        		"TriggersSeparated");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTriggersAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTriggersAccess().getCommaKeyword_5());
    }
)
;





// Entry rule entryRuleTriggersSeparated
entryRuleTriggersSeparated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggersSeparatedRule()); }
	 iv_ruleTriggersSeparated=ruleTriggersSeparated 
	 { $current=$iv_ruleTriggersSeparated.current; } 
	 EOF 
;

// Rule TriggersSeparated
ruleTriggersSeparated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_firstTrigger_0_0=RULE_STRING
		{
			newLeafNode(lv_firstTrigger_0_0, grammarAccess.getTriggersSeparatedAccess().getFirstTriggerSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggersSeparatedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"firstTrigger",
        		lv_firstTrigger_0_0, 
        		"STRING");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggersSeparatedAccess().getCommaKeyword_1_0());
    }
(
(
		lv_followingTriggers_2_0=RULE_STRING
		{
			newLeafNode(lv_followingTriggers_2_0, grammarAccess.getTriggersSeparatedAccess().getFollowingTriggersSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggersSeparatedRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"followingTriggers",
        		lv_followingTriggers_2_0, 
        		"STRING");
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


