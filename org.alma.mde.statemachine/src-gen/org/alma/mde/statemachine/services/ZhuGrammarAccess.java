/*
 * generated by Xtext
 */
package org.alma.mde.statemachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ZhuGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionTopRegionParserRuleCall_2_0 = (RuleCall)cRegionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StateMachine:
		//	"diagram" "{" region=TopRegion "}";
		@Override public ParserRule getRule() { return rule; }

		//"diagram" "{" region=TopRegion "}"
		public Group getGroup() { return cGroup; }

		//"diagram"
		public Keyword getDiagramKeyword_0() { return cDiagramKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//region=TopRegion
		public Assignment getRegionAssignment_2() { return cRegionAssignment_2; }

		//TopRegion
		public RuleCall getRegionTopRegionParserRuleCall_2_0() { return cRegionTopRegionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TopRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStatesParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Assignment cRegionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegionsRegionParserRuleCall_3_0 = (RuleCall)cRegionsAssignment_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionsParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TopRegion:
		//	"region" "{" states=States regions+=Region* transitions=Transitions? "}";
		@Override public ParserRule getRule() { return rule; }

		//"region" "{" states=States regions+=Region* transitions=Transitions? "}"
		public Group getGroup() { return cGroup; }

		//"region"
		public Keyword getRegionKeyword_0() { return cRegionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//states=States
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//States
		public RuleCall getStatesStatesParserRuleCall_2_0() { return cStatesStatesParserRuleCall_2_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_3() { return cRegionsAssignment_3; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_3_0() { return cRegionsRegionParserRuleCall_3_0; }

		//transitions=Transitions?
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }

		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_4_0() { return cTransitionsTransitionsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStatesParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Assignment cRegionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegionsRegionParserRuleCall_4_0 = (RuleCall)cRegionsAssignment_4.eContents().get(0);
		private final Assignment cTransitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransitionsTransitionsParserRuleCall_5_0 = (RuleCall)cTransitionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Region:
		//	"region" name=ID "{" states=States regions+=Region* transitions=Transitions? "}";
		@Override public ParserRule getRule() { return rule; }

		//"region" name=ID "{" states=States regions+=Region* transitions=Transitions? "}"
		public Group getGroup() { return cGroup; }

		//"region"
		public Keyword getRegionKeyword_0() { return cRegionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states=States
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//States
		public RuleCall getStatesStatesParserRuleCall_3_0() { return cStatesStatesParserRuleCall_3_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_4() { return cRegionsAssignment_4; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_4_0() { return cRegionsRegionParserRuleCall_4_0; }

		//transitions=Transitions?
		public Assignment getTransitionsAssignment_5() { return cTransitionsAssignment_5; }

		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_5_0() { return cTransitionsTransitionsParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TransitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFirstTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFirstTransitionTransitionParserRuleCall_3_0 = (RuleCall)cFirstTransitionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFollowingTransitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFollowingTransitionsTransitionParserRuleCall_4_1_0 = (RuleCall)cFollowingTransitionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transitions:
		//	"transitions" ":" "[" firstTransition=Transition ("," followingTransitions+=Transition)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"transitions" ":" "[" firstTransition=Transition ("," followingTransitions+=Transition)* "]"
		public Group getGroup() { return cGroup; }

		//"transitions"
		public Keyword getTransitionsKeyword_0() { return cTransitionsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//firstTransition=Transition
		public Assignment getFirstTransitionAssignment_3() { return cFirstTransitionAssignment_3; }

		//Transition
		public RuleCall getFirstTransitionTransitionParserRuleCall_3_0() { return cFirstTransitionTransitionParserRuleCall_3_0; }

		//("," followingTransitions+=Transition)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//followingTransitions+=Transition
		public Assignment getFollowingTransitionsAssignment_4_1() { return cFollowingTransitionsAssignment_4_1; }

		//Transition
		public RuleCall getFollowingTransitionsTransitionParserRuleCall_4_1_0() { return cFollowingTransitionsTransitionParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStatesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceStateCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceStateIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceStateCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetStateCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetStateCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTriggersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTriggersTriggersParserRuleCall_7_0 = (RuleCall)cTriggersAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cGuardKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cGuardAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cGuardSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cGuardAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cBehaviourKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cColonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cBehaviourAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cBehaviourSTRINGTerminalRuleCall_9_2_0 = (RuleCall)cBehaviourAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Transition:
		//	"{" "states" ":" source=[State] "->" target=[State] "," triggers=Triggers? ("guard" ":" guard=STRING ",")?
		//	("behaviour" ":" behaviour=STRING)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" "states" ":" source=[State] "->" target=[State] "," triggers=Triggers? ("guard" ":" guard=STRING ",")? ("behaviour"
		//":" behaviour=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"states"
		public Keyword getStatesKeyword_1() { return cStatesKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//source=[State]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }

		//[State]
		public CrossReference getSourceStateCrossReference_3_0() { return cSourceStateCrossReference_3_0; }

		//ID
		public RuleCall getSourceStateIDTerminalRuleCall_3_0_1() { return cSourceStateIDTerminalRuleCall_3_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//target=[State]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//[State]
		public CrossReference getTargetStateCrossReference_5_0() { return cTargetStateCrossReference_5_0; }

		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_5_0_1() { return cTargetStateIDTerminalRuleCall_5_0_1; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//triggers=Triggers?
		public Assignment getTriggersAssignment_7() { return cTriggersAssignment_7; }

		//Triggers
		public RuleCall getTriggersTriggersParserRuleCall_7_0() { return cTriggersTriggersParserRuleCall_7_0; }

		//("guard" ":" guard=STRING ",")?
		public Group getGroup_8() { return cGroup_8; }

		//"guard"
		public Keyword getGuardKeyword_8_0() { return cGuardKeyword_8_0; }

		//":"
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }

		//guard=STRING
		public Assignment getGuardAssignment_8_2() { return cGuardAssignment_8_2; }

		//STRING
		public RuleCall getGuardSTRINGTerminalRuleCall_8_2_0() { return cGuardSTRINGTerminalRuleCall_8_2_0; }

		//","
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }

		//("behaviour" ":" behaviour=STRING)?
		public Group getGroup_9() { return cGroup_9; }

		//"behaviour"
		public Keyword getBehaviourKeyword_9_0() { return cBehaviourKeyword_9_0; }

		//":"
		public Keyword getColonKeyword_9_1() { return cColonKeyword_9_1; }

		//behaviour=STRING
		public Assignment getBehaviourAssignment_9_2() { return cBehaviourAssignment_9_2; }

		//STRING
		public RuleCall getBehaviourSTRINGTerminalRuleCall_9_2_0() { return cBehaviourSTRINGTerminalRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStatesSeparatedParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//States:
		//	"states" ":" "{" states=StatesSeparated "}";
		@Override public ParserRule getRule() { return rule; }

		//"states" ":" "{" states=StatesSeparated "}"
		public Group getGroup() { return cGroup; }

		//"states"
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states=StatesSeparated
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//StatesSeparated
		public RuleCall getStatesStatesSeparatedParserRuleCall_3_0() { return cStatesStatesSeparatedParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StatesSeparatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatesSeparated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstStateStateParserRuleCall_0_0 = (RuleCall)cFirstStateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFollowingStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFollowingStatesStateParserRuleCall_1_1_0 = (RuleCall)cFollowingStatesAssignment_1_1.eContents().get(0);
		
		//StatesSeparated:
		//	firstState=State ("," followingStates+=State)*;
		@Override public ParserRule getRule() { return rule; }

		//firstState=State ("," followingStates+=State)*
		public Group getGroup() { return cGroup; }

		//firstState=State
		public Assignment getFirstStateAssignment_0() { return cFirstStateAssignment_0; }

		//State
		public RuleCall getFirstStateStateParserRuleCall_0_0() { return cFirstStateStateParserRuleCall_0_0; }

		//("," followingStates+=State)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//followingStates+=State
		public Assignment getFollowingStatesAssignment_1_1() { return cFollowingStatesAssignment_1_1; }

		//State
		public RuleCall getFollowingStatesStateParserRuleCall_1_1_0() { return cFollowingStatesStateParserRuleCall_1_1_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDirectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//State:
		//	Direction? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//Direction? name=ID
		public Group getGroup() { return cGroup; }

		//Direction?
		public RuleCall getDirectionParserRuleCall_0() { return cDirectionParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Direction:
		//	">" | "*";
		@Override public ParserRule getRule() { return rule; }

		//">" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class TriggersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Triggers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggersTriggersSeparatedParserRuleCall_3_0 = (RuleCall)cTriggersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Triggers:
		//	"triggers" ":" "{" triggers=TriggersSeparated "}" ",";
		@Override public ParserRule getRule() { return rule; }

		//"triggers" ":" "{" triggers=TriggersSeparated "}" ","
		public Group getGroup() { return cGroup; }

		//"triggers"
		public Keyword getTriggersKeyword_0() { return cTriggersKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//triggers=TriggersSeparated
		public Assignment getTriggersAssignment_3() { return cTriggersAssignment_3; }

		//TriggersSeparated
		public RuleCall getTriggersTriggersSeparatedParserRuleCall_3_0() { return cTriggersTriggersSeparatedParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
	}

	public class TriggersSeparatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggersSeparated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstTriggerSTRINGTerminalRuleCall_0_0 = (RuleCall)cFirstTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFollowingTriggersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFollowingTriggersSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFollowingTriggersAssignment_1_1.eContents().get(0);
		
		//TriggersSeparated:
		//	firstTrigger=STRING ("," followingTriggers+=STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//firstTrigger=STRING ("," followingTriggers+=STRING)*
		public Group getGroup() { return cGroup; }

		//firstTrigger=STRING
		public Assignment getFirstTriggerAssignment_0() { return cFirstTriggerAssignment_0; }

		//STRING
		public RuleCall getFirstTriggerSTRINGTerminalRuleCall_0_0() { return cFirstTriggerSTRINGTerminalRuleCall_0_0; }

		//("," followingTriggers+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//followingTriggers+=STRING
		public Assignment getFollowingTriggersAssignment_1_1() { return cFollowingTriggersAssignment_1_1; }

		//STRING
		public RuleCall getFollowingTriggersSTRINGTerminalRuleCall_1_1_0() { return cFollowingTriggersSTRINGTerminalRuleCall_1_1_0; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final TopRegionElements pTopRegion;
	private final RegionElements pRegion;
	private final TransitionsElements pTransitions;
	private final TransitionElements pTransition;
	private final StatesElements pStates;
	private final StatesSeparatedElements pStatesSeparated;
	private final StateElements pState;
	private final DirectionElements pDirection;
	private final TriggersElements pTriggers;
	private final TriggersSeparatedElements pTriggersSeparated;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ZhuGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pTopRegion = new TopRegionElements();
		this.pRegion = new RegionElements();
		this.pTransitions = new TransitionsElements();
		this.pTransition = new TransitionElements();
		this.pStates = new StatesElements();
		this.pStatesSeparated = new StatesSeparatedElements();
		this.pState = new StateElements();
		this.pDirection = new DirectionElements();
		this.pTriggers = new TriggersElements();
		this.pTriggersSeparated = new TriggersSeparatedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.alma.mde.statemachine.Zhu".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	"diagram" "{" region=TopRegion "}";
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//TopRegion:
	//	"region" "{" states=States regions+=Region* transitions=Transitions? "}";
	public TopRegionElements getTopRegionAccess() {
		return pTopRegion;
	}
	
	public ParserRule getTopRegionRule() {
		return getTopRegionAccess().getRule();
	}

	//Region:
	//	"region" name=ID "{" states=States regions+=Region* transitions=Transitions? "}";
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//Transitions:
	//	"transitions" ":" "[" firstTransition=Transition ("," followingTransitions+=Transition)* "]";
	public TransitionsElements getTransitionsAccess() {
		return pTransitions;
	}
	
	public ParserRule getTransitionsRule() {
		return getTransitionsAccess().getRule();
	}

	//Transition:
	//	"{" "states" ":" source=[State] "->" target=[State] "," triggers=Triggers? ("guard" ":" guard=STRING ",")?
	//	("behaviour" ":" behaviour=STRING)? "}";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//States:
	//	"states" ":" "{" states=StatesSeparated "}";
	public StatesElements getStatesAccess() {
		return pStates;
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}

	//StatesSeparated:
	//	firstState=State ("," followingStates+=State)*;
	public StatesSeparatedElements getStatesSeparatedAccess() {
		return pStatesSeparated;
	}
	
	public ParserRule getStatesSeparatedRule() {
		return getStatesSeparatedAccess().getRule();
	}

	//State:
	//	Direction? name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Direction:
	//	">" | "*";
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	//Triggers:
	//	"triggers" ":" "{" triggers=TriggersSeparated "}" ",";
	public TriggersElements getTriggersAccess() {
		return pTriggers;
	}
	
	public ParserRule getTriggersRule() {
		return getTriggersAccess().getRule();
	}

	//TriggersSeparated:
	//	firstTrigger=STRING ("," followingTriggers+=STRING)*;
	public TriggersSeparatedElements getTriggersSeparatedAccess() {
		return pTriggersSeparated;
	}
	
	public ParserRule getTriggersSeparatedRule() {
		return getTriggersSeparatedAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
